import base64
import io
import PyPDF2
import docx
from fpdf import FPDF

def extract_text_from_pdf(content):
    reader = PyPDF2.PdfReader(io.BytesIO(content))
    return " ".join([page.extract_text() for page in reader.pages])

def extract_text_from_txt(file_content):
    return file_content.decode("utf-8")

def extract_text_from_docx(content):
    doc = docx.Document(io.BytesIO(content))
    return " ".join(p.text for p in doc.paragraphs)

def create_download_link(content, filename):
    encoded = base64.b64encode(content).decode()
    return f'<a href="data:application/octet-stream;base64,{encoded}" download="{filename}">ðŸ“¥ Download</a>'

# utils.py
def generate_report(candidate):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # Header
    pdf.set_fill_color(200, 220, 255)
    pdf.cell(0, 10, f"AI Analysis Report: {candidate['name']}", ln=1, align='C', fill=True)
    pdf.ln(10)
    
    # Score Summary
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, f"Overall Match Score: {candidate['final_score']:.1f}%", ln=1)
    pdf.set_font("Arial", size=12)
    
    # Score Breakdown
    pdf.cell(45, 10, "AI Assessment Score:", border=0)
    pdf.cell(0, 10, f"{candidate['score']:.1f}%", ln=1)
    pdf.cell(45, 10, "Semantic Match Score:", border=0)
    pdf.cell(0, 10, f"{candidate['similarity_score']*100:.1f}%", ln=1)
    pdf.ln(5)
    
    # Personal Information
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Candidate Overview", ln=1)
    pdf.set_font("Arial", size=12)
    pdf.cell(40, 10, "Email:", border=0)
    pdf.cell(0, 10, candidate['email'], ln=1)
    pdf.cell(40, 10, "Experience:", border=0)
    pdf.cell(0, 10, f"{candidate['experience']} years", ln=1)
    pdf.ln(5)
    
    # Skills Section
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Key Skills:", ln=1)
    pdf.set_font("Arial", size=12)
    skills = ", ".join(candidate['skills'][:10])
    pdf.multi_cell(0, 10, skills)
    pdf.ln(5)
    
    # Education Section
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Education:", ln=1)
    pdf.set_font("Arial", size=12)
    for edu in candidate['education'][:3]:
        pdf.cell(0, 10, "- " + edu, ln=1)
    pdf.ln(5)
    
    # Certifications
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Certifications:", ln=1)
    pdf.set_font("Arial", size=12)
    for cert in candidate['certifications'][:5]:
        pdf.cell(0, 10, "- " + cert, ln=1)
    pdf.ln(5)
    
    # AI Analysis
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "AI Assessment:", ln=1)
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, candidate['rationale'])
    pdf.ln(5)
    
        # Responsibility Matching Section
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Job Responsibility Alignment:", ln=1)
    pdf.set_font("Arial", size=12)
    
    # Matched Responsibilities
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 10, "Strong Matches:", ln=1)
    pdf.set_font("Arial", size=10)
    if candidate.get('matched_responsibilities'):
        for resp in candidate['matched_responsibilities'][:5]:
            pdf.cell(10)  # Indent
            pdf.multi_cell(0, 8, f"âœ“ {resp}", markdown=True)
    else:
        pdf.cell(0, 8, "No key responsibilities directly matched", ln=1)
    pdf.ln(3)
    
    # Missing Responsibilities
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 10, "Suggested Improvements:", ln=1)
    pdf.set_font("Arial", size=10)
    if candidate.get('missing_responsibilities'):
        for resp in candidate['missing_responsibilities'][:5]:
            pdf.cell(10)  # Indent
            pdf.multi_cell(0, 8, f"âž¤ {resp}", markdown=True)
    else:
        pdf.cell(0, 8, "All key responsibilities are adequately addressed", ln=1)
    
    pdf.ln(5)
    
    # Footer
    pdf.set_y(-15)
    pdf.set_font("Arial", 'I', 8)
    pdf.cell(0, 10, "Generated by AI CV Analyzer", 0, 0, 'C')
    
    return pdf.output(dest='S').encode('latin1')